
Q.1) Duplicate Brackets

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
            Scanner s = new Scanner(System.in);
            String str = s.nextLine();
            Stack<Character>st = new Stack<>();
            for(int i = 0 ; i<str.length() ; i++){
                char ch = str.charAt(i);
                if(ch == ')'){
                    if(st.peek() == '('){
                        System.out.println(true);
                        return;
                    }
                    else{
                        while(st.peek()!='('){
                            st.pop();
                        }
                        st.pop();
                    }
                }
                else{
                    st.push(ch);
                }
            }
            System.out.println(false);
    }

}


Q.2) Balanced Brackets


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
            Scanner scn = new Scanner(System.in);
            String str = scn.nextLine();
            Stack<Character> st = new Stack<>();
            for(int i = 0 ; i < str.length() ; i++){
                char ch = str.charAt(i);
                if(ch == '(' || ch == '[' || ch == '{'){
                    st.push(ch);
                }
                else if(ch == ')'){
                    if( st.size() == 0 ){
                        System.out.println(false);
                        return;
                    }
                    else if( st.peek()!= '('){
                        System.out.println(false);
                        return;
                    }
                    else{
                        st.pop();
                    }
                }
                else if(ch == ']'){
                    if(st.size() == 0){
                        System.out.println(false);
                        return;
                    }
                    else if( st.peek()!= '['){
                        System.out.println(false);
                        return;
                    }
                    else{
                        st.pop();
                    }
                }
                else if(ch == '}'){
                    if(st.size() == 0){
                        System.out.println(false);
                        return;
                    }
                    else if( st.peek()!= '{'){
                        System.out.println(false);
                        return;
                    }
                    else{
                        st.pop();
                    }
                }
              
            }
            if(st.size()== 0 ) {
                System.out.println(true);
            }
            else{
                System.out.println(false);
            }
    }

}


Q.3) Next Greater Element on the Right

import java.io.*;
import java.util.*;

public class Main{
  public static void display(int[] a){
    StringBuilder sb = new StringBuilder();

    for(int val: a){
      sb.append(val + "\n");
    }
    System.out.println(sb);
  }

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int n = Integer.parseInt(br.readLine());
    int[] a = new int[n];
    for(int i = 0; i < n; i++){
       a[i] = Integer.parseInt(br.readLine());
    }

    int[] nge = solve(a);
    display(nge);
 }

 public static int[] solve(int[] arr){
     
     // pop,ans,push
   int nge[] = new int[arr.length];
   Stack <Integer> st = new Stack<>();
   st.push(arr[arr.length-1]);
   nge[arr.length-1] = -1;
   for( int i = arr.length-2 ; i>=0 ; i--){
       while(st.size()>0 && arr[i] >= st.peek()){
           st.pop();
       }
       if(st.size() == 0){
           nge[i] = -1;
       }else{
           nge[i] = st.peek();
       }
       st.push(arr[i]);
   }
   return nge;
 }

}


Q.4) Stock Span

import java.io.*;
import java.util.*;

public class Main{
  public static void display(int[] a){
    StringBuilder sb = new StringBuilder();

    for(int val: a){
      sb.append(val + "\n");
    }
    System.out.println(sb);
  }

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int n = Integer.parseInt(br.readLine());
    int[] a = new int[n];
    for(int i = 0; i < n; i++){
       a[i] = Integer.parseInt(br.readLine());
    }

    int[] span = solve(a);
    display(span);
 }

 public static int[] solve(int[] arr){
   // solve
   
   int stock[] = new int[arr.length];
   Stack<Integer>st = new Stack<>();
   st.push(0);
   stock[0] = 1;
   for(int i = 1 ; i < arr.length ; i++){
       while(st.size() > 0 && arr[i] > arr[st.peek()]){
           st.pop();
       }
       if(st.size() == 0){
           stock[i] = i + 1;
       }else{
           stock[i] = i - st.peek();
       }
       st.push(i);
   }
   return stock;
 }

}
