-----------------------------------INTRODUCTION  TO   RECURSION----------------------------
Q.1) Print Decreasing

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        printDecreasing(x);
    }

    public static void printDecreasing(int n){
        if(n == 0){
            return ;
        }
        System.out.println(n);
        printDecreasing(n-1);
    }

}


Q.2) Print Increasing

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        printIncreasing(x);
        
    }

    public static void printIncreasing(int n){
        if(n == 0){
            return;
        }
        printIncreasing(n-1);
        System.out.println(n);
    }

}


Q.3) Print Increasing Decreasing


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        pdi(x);
    }

    public static void pdi(int n){
        if(n == 0){
            return;
        }
        System.out.println(n);
        pdi(n-1);
        System.out.println(n);
    }

}




Q.4)  Factorial




import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        System.out.println(factorial(x));
    }

    public static int factorial(int n){
        if(n == 0 || n == 1){
            return n;
        }
        return n * factorial(n-1);
    }

}



Q.5) Power-Linear



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        int y = s.nextInt();
        System.out.println(power(x,y));
    }

    public static int power(int x, int n){
        if(n == 0){
            return 1;
        }
        return x * power(x,n-1);
    }

}



Q.6) Power - Logarithmic



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        int y = s.nextInt();
        System.out.println(power(x,y));
    }

    public static int power(int x, int n){
        if(n == 0){
            return 1;
        }
        else if(n%2 == 0){
            return power(x,n/2) * power(x,n/2);
        }
        else{
            return x *  power(x,n/2) * power(x,n/2);
        }
    }

}


Q.7) Print Zig-Zag



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        pzz(x);
    }

    public static void pzz(int n){
        if(n==0){
            return ;
        }
        System.out.print(n+" "); // pre call
        pzz(n-1);                // left call
        System.out.print(n+" "); // in-call
        pzz(n-1);                // right call
        System.out.print(n+" "); // post-call
    }

}

Q.8) Tower of hanoi


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int t1id = s.nextInt();
        int t2id = s.nextInt();
        int t3id = s.nextInt();
        
        toh(n , t1id , t2id , t3id);
        
    }

    public static void toh(int n, int t1id, int t2id, int t3id){
        if(n == 0){
            return;
        }
        toh(n-1,t1id,t3id,t2id);
        System.out.println(n + "[" + t1id + " " + "->" + " " + t2id  + "]");
        toh(n-1,t3id,t2id,t1id);
        
    }

}





------------------------------RECURSION  IN  ARRAYS---------------------------


Q.1) Display Array


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt(); 
        int [] a = new int[n];
        for(int i = 0;i < n;i++){
             a[i] = s.nextInt();
        }
        displayArr(a , 0);
    }

    public static void displayArr(int[] arr, int idx){
        if(idx == arr.length){
            return ;
        }
       
        System.out.println(arr[idx]);
         displayArr(arr , idx+1);
    }

}



Q.2) Display Array in Reverse


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int a[] = new int[n];
        for(int i = 0 ; i<n ; i++){
            a[i] = s.nextInt();
        }
        displayArrReverse(a,0);
    }

    public static void displayArrReverse(int[] arr, int idx) {
          if(idx == arr.length){
              return;
          }
           displayArrReverse(arr , idx+1);
           System.out.println(arr[idx]);
    }

}



Q.3) Max of an Array


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int a[] = new int[n];
        for(int i = 0 ; i<n ; i++){
            a[i] = s.nextInt();
        }
        displayArrReverse(a,0);
    }

    public static void displayArrReverse(int[] arr, int idx) {
          if(idx == arr.length){
              return;
          }
           displayArrReverse(arr , idx+1);
           System.out.println(arr[idx]);
    }

}


Q.4) First Index


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int [] a = new int[n];
        for(int i = 0 ; i < n ; i++){
            a[i] = s.nextInt();
        }
        int x = s.nextInt();
        System.out.println(firstIndex(a,0,x));
    }

    public static int firstIndex(int[] arr, int idx, int x){
        if(idx == arr.length)
        {
            return -1;
        }
        int si = firstIndex(arr,idx+1,x);
        if(arr[idx] == x){
            return idx;
        }
        else{
            return si;
        }
    }

}



Q.5) Last index of an array


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
         Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int [] a = new int[n];
        for(int i = 0 ; i < n ; i++){
            a[i] = s.nextInt();
        }
        int x = s.nextInt();
        System.out.println(lastIndex(a,0,x));
    }

    public static int lastIndex(int[] arr, int idx, int x){
        if(idx == arr.length){
            return -1;
        }
        int li = lastIndex(arr,idx+1,x);
        if(li == -1){
            if(arr[idx] == x){
                return idx;
            }
            else{
                return -1;
            }
        }
        return li;
    }

}







----------------------------RECURSION    WITH     ARRAY    LIST------------------------------------------------



Q.1) Print subsequences of a string



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
       Scanner s = new Scanner(System.in);
       String str = s.next();
       System.out.print(gss(str));
    }
    
    // bc --> [-- , -c , b- , bc]
    // abc --> [--- , --c , -b- , -bc , a-- ,a-c , ab- , abc]

    public static ArrayList<String> gss(String str) {
          
          if(str.length() == 0){
              ArrayList<String>base = new ArrayList<>();
              base.add("");
              return base;
          }
          char first = str.charAt(0);
          String remaining = str.substring(1);
          ArrayList<String> result = gss(remaining);
          ArrayList<String> myresult = new ArrayList<>();
          
          for(String x:result){
              myresult.add(""  + x);
              
          }
          for(String x:result){
              
              myresult.add(first + x);
          }
          return myresult;
    }

}



Q.2) Get key pad combination



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
            Scanner s = new Scanner(System.in);
            String str = s.next();
            System.out.print(getKPC(str));
    }
    static String [] codes = {".;","abc","def" ,"ghi","jkl","mno","pqrs","tu","vwx","yz"};
    public static ArrayList<String> getKPC(String str) {
        if(str.length() == 0){
            ArrayList<String> base = new ArrayList<>();
            base.add("");
            return base;
        }
        
        char first = str.charAt(0);
        String remaining = str.substring(1);
        ArrayList<String> result = getKPC(remaining);
        ArrayList<String> myresult = new ArrayList<>();
        String required = codes[first - '0'];
        for(int i = 0 ; i < required.length() ; i++){
            char x = required.charAt(i);
            for(String rr:result){
                myresult.add(x+rr);
            }
        }
        return myresult;
    }

}


Q.3) Get Staircase paths



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
           Scanner s = new Scanner(System.in);
           int x = s.nextInt();
           System.out.print(getStairPaths(x));
    }

    public static ArrayList<String> getStairPaths(int n) {
        if(n == 0){
            ArrayList<String> base = new ArrayList<>();
            base.add("");
            return base;
        }else if(n < 0){
            ArrayList<String> base = new ArrayList<>();
            return base;
        }
        
        
        ArrayList<String> paths1 = getStairPaths(n-1);
        
        ArrayList<String> paths2 = getStairPaths(n-2);
        
        ArrayList<String> paths3 = getStairPaths(n-3);
        ArrayList<String> result = new ArrayList<>();
        for(String x : paths1){
            result.add(1 + x);
        }
         for(String x : paths2){
            result.add(2 + x);
        }
         for(String x : paths3){
            result.add(3 + x);
        }
        return result;
        
    }

}


Q.4) Get Maze Paths


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner s = new Scanner(System.in);
        int row  = s.nextInt();
        int col = s.nextInt();
        System.out.print(getMazePaths(1,1,row,col));

    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
       if( sr == dr && sc == dc ){
           ArrayList<String>base = new ArrayList<>();
           base.add("");
           return base;
       }
       ArrayList<String> horpaths = new ArrayList<>();
       ArrayList<String> vertpaths = new ArrayList<>();
       ArrayList<String> answer = new ArrayList<>();
       
       if(sc < dc){
           horpaths = getMazePaths(sr , sc+1 , dr , dc);
       }
       if(sr < dr){
           vertpaths = getMazePaths(sr+1 , sc , dr , dc);
           
       }
       for( String x:horpaths){
           answer.add("h" + x);
       }
       for(String y : vertpaths){
           answer.add("v"+ y);
       }
       return answer;
    }

}


Q.5)  Get maze paths with jumps


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner s  = new Scanner(System.in);
        int row  = s.nextInt();
        int col = s.nextInt();
        System.out.print(getMazePaths(1,1,row,col));

    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if( sr == dr && sc == dc ){
            ArrayList<String> base = new ArrayList<>();
            base.add("");
            return base;
        }
        ArrayList<String> answer = new ArrayList<>();
        // horizontal moves
        for(int movesize = 1 ; movesize <= dc - sc ; movesize++){
            ArrayList<String>hpaths = getMazePaths(sr,sc+movesize,dr,dc);
            for(String x:hpaths){
                answer.add("h" + movesize  + x);
            }
        }
        // vertical paths
         for(int movesize = 1 ; movesize <= dr - sr ; movesize++){
            ArrayList<String>vpaths = getMazePaths(sr+movesize,sc,dr,dc);
            for(String x:vpaths){
                answer.add("v" + movesize  + x);
            }
        }
         for(int movesize = 1 ; movesize <= dc - sc && movesize <= dr - sr ; movesize++){
            ArrayList<String>dpaths = getMazePaths(sr+movesize,sc+movesize,dr,dc);
            for(String x:dpaths){
                answer.add("d" + movesize  + x);
            }
        }
        return answer;
    }

}




---------------------------RECURSION   ON    THE   WAY   UP----------------------


Q.1) Print subsequences



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
           Scanner s = new Scanner(System.in);
           String str = s.next();
           printSS(str,"");
    }

    public static void printSS(String str, String ans) {
        if(str.length() == 0){
            System.out.println(ans);
            return;
        }
        char first = str.charAt(0);
        String remaining = str.substring(1);
        printSS(remaining , ans + first);
        printSS(remaining  , ans + "");
    }

}




Q.2) Print key pad combination


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
           Scanner s = new Scanner(System.in);
           String st = s.next();
           printKPC(st , "");
    }
    static String arr[] = {".;","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};
    public static void printKPC(String str, String asf) {
        if(str.length() == 0){
            System.out.println(asf);
            return;
            
        }
        char first = str.charAt(0);
        String remaining = str.substring(1);
        String code = arr[first - '0'];
        for(int i = 0;i<code.length();i++){
            char x = code.charAt(i);
            printKPC(remaining,asf + x);
        }
    }

}



Q.3) Print Stair Paths



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
            Scanner s = new Scanner(System.in);
            int x = s.nextInt();
            printStairPaths(x , "");
    }

    public static void printStairPaths(int n, String path) {
        if(n<0){
            return;
        }
        if(n==0){
            System.out.println(path);
        }
        printStairPaths(n-1 , path  + "1");
        printStairPaths(n-2 , path  + "2");
        printStairPaths(n-3 , path  + "3");
    }

}



Q.4) Print Maze Paths


import java.io.*;
	import java.util.*;

	public class Main {

	    public static void main(String[] args) throws Exception {
              Scanner s = new Scanner(System.in);
              int row = s.nextInt();
              int col = s.nextInt();
              printMazePaths(1,1,row,col,"");
	    }

	    // sr - source row
	    // sc - source column
	    // dr - destination row
	    // dc - destination column
	    public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
	        if(sr>dr || sc>dc){
	            return;
	        }
	        if(sr == dr && sc == dc){
	            System.out.println(psf);
	            return ;
	        }
	        printMazePaths(sr , sc+1 , dr , dc , psf + "h");
	        printMazePaths(sr + 1 , sc , dr , dc , psf + "v");
	    }

	}


Q.5) Print Maze Paths with jumps

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
         Scanner s = new Scanner(System.in);
         int row = s.nextInt();
         int col = s.nextInt();
         printMazePaths(1 , 1, row , col , "");
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
        if(sr == dr && sc == dc){
            System.out.println(psf);
        }
        //horizontally
        for(int ms = 1 ; ms <= dc-sc ; ms++){
            printMazePaths(sr , sc+ms , dr , dc , psf + "h" + ms);
        }
        //vertically
         for(int ms = 1 ; ms <= dr-sr ; ms++){
            printMazePaths(sr+ms , sc , dr , dc , psf + "v" + ms);
        }
        //diagonally
         for(int ms = 1 ; ms <= dr-sr && ms <= dc-sc ; ms++){
            printMazePaths(sr+ms , sc+ms , dr , dc , psf + "d" + ms);
        }
    }

}
