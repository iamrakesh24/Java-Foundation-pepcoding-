-----------------------------------INTRODUCTION  TO   RECURSION----------------------------
Q.1) Print Decreasing

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        printDecreasing(x);
    }

    public static void printDecreasing(int n){
        if(n == 0){
            return ;
        }
        System.out.println(n);
        printDecreasing(n-1);
    }

}


Q.2) Print Increasing

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        printIncreasing(x);
        
    }

    public static void printIncreasing(int n){
        if(n == 0){
            return;
        }
        printIncreasing(n-1);
        System.out.println(n);
    }

}


Q.3) Print Increasing Decreasing


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        pdi(x);
    }

    public static void pdi(int n){
        if(n == 0){
            return;
        }
        System.out.println(n);
        pdi(n-1);
        System.out.println(n);
    }

}




Q.4)  Factorial




import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        System.out.println(factorial(x));
    }

    public static int factorial(int n){
        if(n == 0 || n == 1){
            return n;
        }
        return n * factorial(n-1);
    }

}



Q.5) Power-Linear



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        int y = s.nextInt();
        System.out.println(power(x,y));
    }

    public static int power(int x, int n){
        if(n == 0){
            return 1;
        }
        return x * power(x,n-1);
    }

}



Q.6) Power - Logarithmic



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        int y = s.nextInt();
        System.out.println(power(x,y));
    }

    public static int power(int x, int n){
        if(n == 0){
            return 1;
        }
        else if(n%2 == 0){
            return power(x,n/2) * power(x,n/2);
        }
        else{
            return x *  power(x,n/2) * power(x,n/2);
        }
    }

}


Q.7) Print Zig-Zag



import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int x = s.nextInt();
        pzz(x);
    }

    public static void pzz(int n){
        if(n==0){
            return ;
        }
        System.out.print(n+" "); // pre call
        pzz(n-1);
        System.out.print(n+" "); // in-call
        pzz(n-1);
        System.out.print(n+" "); // post-call
    }

}







------------------------------RECURSION  IN  ARRAYS---------------------------


Q.1) Display Array


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner s = new Scanner(System.in);
        int n = s.nextInt(); 
        int [] a = new int[n];
        for(int i = 0;i < n;i++){
             a[i] = s.nextInt();
        }
        displayArr(a , 0);
    }

    public static void displayArr(int[] arr, int idx){
        if(idx == arr.length){
            return ;
        }
       
        System.out.println(arr[idx]);
         displayArr(arr , idx+1);
    }

}
